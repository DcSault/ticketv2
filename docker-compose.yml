version: '3.8'

services:
  app:
    image: node:18-alpine
    container_name: ticketv2-app
    working_dir: /app
    command: |
      sh -c '
        set -e
        
        # Fonction pour logger les erreurs
        error_exit() {
          echo "‚ùå ERROR: $1" >&2
          exit 1
        }
        
        echo "‚öôÔ∏è  Initializing..."
        
        echo "üì¶ Installing git..."
        apk add --no-cache git || error_exit "Failed to install git"
        
        echo "üßπ Cleaning previous installation..."
        rm -rf /tmp/ticketv2 || error_exit "Failed to clean temp directory"
        
        echo "üì• Downloading source code..."
        git clone -q https://github.com/DcSault/ticketv2.git /tmp/ticketv2 || error_exit "Failed to clone repository"
        
        echo "üìã Copying files to /app..."
        cp -R /tmp/ticketv2/* /app/ || error_exit "Failed to copy files"
        cp /tmp/ticketv2/.env.example /app/.env 2>/dev/null || echo "‚ö†Ô∏è  Warning: .env.example not found"
        
        echo "üßπ Cleaning temp files..."
        rm -rf /tmp/ticketv2 || echo "‚ö†Ô∏è  Warning: Failed to clean temp"
        
        echo "üì¶ Installing server dependencies (this may take a while)..."
        npm install --omit=dev 2>&1 | tail -n 20 || error_exit "Failed to install server dependencies"
        
        echo "üì¶ Installing client dependencies (this may take a while)..."
        (cd client && npm install 2>&1 | tail -n 20) || error_exit "Failed to install client dependencies"
        
        echo "üî® Building frontend for production..."
        (cd client && npm run build 2>&1 | tail -n 10) || error_exit "Failed to build frontend"
        
        echo "‚úÖ Build completed successfully"
        
        echo "‚è≥ Waiting for database..."
        sleep 5
        
        echo "üóÑÔ∏è  Setting up database..."
        node server/scripts/setup-db.js || error_exit "Failed to setup database"
        
        echo "üöÄ Starting application..."
        npm start
      '
    ports:
      - "7979:3000"
    depends_on:
      - db
    environment:
      # Database
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=ticketv2
      - DB_USER=postgres
      - DB_PASSWORD=.njw6JQ*NKX8.vq!9R2!KfDMDB8Y_n
      
      # JWT
      - JWT_SECRET=Le42tp*r7ng_7YxrV_hm_YaZWmXPmxQ-Af.fgPDZ7Zr*mA@AFzt.jx.aJuojyz@Tux2cCBJDif-@QAHkBoVRbaVKfbVGwUfeXt2g
      - JWT_EXPIRES_IN=7d
      
      # Server
      - PORT=3000
      - NODE_ENV=production
      
      # Default admin
      - DEFAULT_ADMIN_USERNAME=admin
      - DEFAULT_ADMIN_PASSWORD=admin123
    volumes:
      - ticketv2_data:/app
    networks:
      - ticketv2-network
    restart: "no"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    container_name: ticketv2-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: .njw6JQ*NKX8.vq!9R2!KfDMDB8Y_n
      POSTGRES_DB: ticketv2
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ticketv2-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    name: ticketv2-db-data
  ticketv2_data:
    name: ticketv2-app-data

networks:
  ticketv2-network:
    name: ticketv2-network
    driver: bridge
